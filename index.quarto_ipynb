{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Auto Operating Costs Calculation\n",
        "subtitle: Estimating Auto Operating Costs for Travel Demand Model\n",
        "author:\n",
        " - name: Pukar Bhandari\n",
        "   email: pukar.bhandari@wfrc.utah.gov\n",
        "   affiliation:\n",
        "     - name: Wasatch Front Regional Council\n",
        "       url: \"https://wfrc.utah.gov/\"\n",
        "date: \"2025-09-17\"\n",
        "\n",
        "execute:\n",
        "   eval: true\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    number-depth: 2\n",
        "    html-math-method: katex\n",
        "    code-link: true\n",
        "    code-tools: true\n",
        "    code-fold: true\n",
        "    code-summary: \"Show the code\"\n",
        "\n",
        "title-block-banner: true\n",
        "---\n",
        "\n",
        "This document updates the `0 - Auto Operating Cost - 2022-01-11.qmd` to the new base year `2023`.\n",
        "\n",
        "## Environment Setup\n",
        "\n",
        "### Load Libraries\n",
        "\n",
        "``` python\n",
        "!pip install numpy pandas geopandas matplotlib seaborn scipy openpyxl xlrd datetime python-dotenv\n",
        "# OR\n",
        "!conda install numpy pandas geopandas matplotlib seaborn scipy openpyxl xlrd datetime python-dotenv\n",
        "```"
      ],
      "id": "258dca7b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# For Analysis\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# For Visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "from matplotlib.ticker import FuncFormatter\n",
        "import seaborn as sns\n",
        "from scipy.interpolate import make_interp_spline\n",
        "from scipy import stats\n",
        "\n",
        "# misc\n",
        "import datetime\n",
        "import os\n",
        "from pathlib import Path\n",
        "import requests"
      ],
      "id": "fb8f0c59",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Set Base Year for Calculations"
      ],
      "id": "1fcb49aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "BASE_YEAR = 2023"
      ],
      "id": "debb32f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Read Raw Data\n",
        "\n",
        "### 3-11\n",
        "\n",
        "Table 3-11: Sales Price of Transportation Fuel to End-Users \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/sales-price-transportation-fuel-end-users-current-cents-gallon)\\]"
      ],
      "id": "59a557d7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_11 = Path(\"data/bts/table_03_11_032824.xlsx\")\n",
        "if not filepath_3_11.exists():\n",
        "    filepath_3_11.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2024-03/table_03_11_032824.xlsx\")\n",
        "    filepath_3_11.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_3_11 = pd.read_excel(\n",
        "  filepath_3_11,\n",
        "  sheet_name=\"3-11\",\n",
        "  header=1,\n",
        "  usecols=\"A:AK\", # TODO: update cols later for new data\n",
        "  nrows=10\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_3_11"
      ],
      "id": "23ccdf9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 3-12\n",
        "\n",
        "Table 3-12: Price Trends of Gasoline v. Other Consumer Goods and Services \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/price-trends-gasoline-v-other-consumer-goods-and-services)\\]"
      ],
      "id": "5ca4ae66"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_12 = Path(\"data/bts/table_03_12_032824_1.xlsx\")\n",
        "if not filepath_3_12.exists():\n",
        "    filepath_3_12.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2024-03/table_03_12_032824_1.xlsx\")\n",
        "    filepath_3_12.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_3_12 = pd.read_excel(\n",
        "  filepath_3_12,\n",
        "  sheet_name=\"3-12\",\n",
        "  header=1,\n",
        "  usecols=\"A:AM\", # TODO: update cols later for new data\n",
        "  nrows=15\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_3_12"
      ],
      "id": "ce826fe3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 3-25\n",
        "\n",
        "Table 3-25: Average Wage and Salary Accruals per Full-Time Equivalent Employee by Transportation Industry \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/average-wage-and-salary-accruals-full-time-equivalent-employee-transportation-industry-naics)\\]"
      ],
      "id": "b8830faf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_25 = Path(\"data/bts/table_03_25_102122.xlsx\")\n",
        "if not filepath_3_25.exists():\n",
        "    filepath_3_25.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2022-10/table_03_25_102122.xlsx\")\n",
        "    filepath_3_25.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_3_25 = pd.read_excel(\n",
        "  filepath_3_25,\n",
        "  sheet_name=\"3-25\",\n",
        "  header=1,\n",
        "  usecols=\"A:Y\", # TODO: update cols later for new data\n",
        "  nrows=10\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_3_25"
      ],
      "id": "c0037e50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 4-12\n",
        "\n",
        "Table 4-12: Light Duty Vehicle, Long Wheel Base Fuel Consumption and Travel \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/other-2-axle-4-tire-vehicle-fuel-consumption-and-travel-0)\\]"
      ],
      "id": "1a2a73e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_12 = Path(\"data/bts/table_04_12M_032725.xlsx\")\n",
        "if not filepath_4_12.exists():\n",
        "    filepath_4_12.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_12M_032725.xlsx\")\n",
        "    filepath_4_12.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_4_12 = pd.read_excel(\n",
        "  filepath_4_12,\n",
        "  sheet_name=\"4-12M\",\n",
        "  header=1,\n",
        "  usecols=\"A:AM\", # TODO: update cols later for new data\n",
        "  nrows=6\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_4_12"
      ],
      "id": "a2fa98af",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy - CombinedVehType\n",
        "\n",
        "Table 4-9: Motor Vehicle Fuel Consumption and Travel \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/motor-vehicle-fuel-consumption-and-travel)\\]"
      ],
      "id": "ea598d23"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_9 = Path(\"data/bts/table_04_09_032825.xlsx\")\n",
        "if not filepath_4_9.exists():\n",
        "    filepath_4_9.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_09_032825.xlsx\")\n",
        "    filepath_4_9.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_FE_CombinedVehType = pd.read_excel(\n",
        "  filepath_4_9,\n",
        "  sheet_name=\"4-9\",\n",
        "  header=1,\n",
        "  usecols=\"A:AO\", # TODO: update cols later for new data\n",
        "  nrows=6\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_FE_CombinedVehType"
      ],
      "id": "2bc4d757",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy - LightDuty\n",
        "\n",
        "Table 4-23:  Average Fuel Efficiency of U.S. Light Duty Vehicles \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/average-fuel-efficiency-us-light-duty-vehicles)\\]"
      ],
      "id": "6bca2fd6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_23 = Path(\"data/bts/table_04_23_042425.xlsx\")\n",
        "if not filepath_4_23.exists():\n",
        "    filepath_4_23.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-04/table_04_23_042425.xlsx\")\n",
        "    filepath_4_23.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_FE_LightDuty = pd.read_excel(\n",
        "  filepath_4_23,\n",
        "  sheet_name=\"4-23\",\n",
        "  header=1,\n",
        "  usecols=\"A:AK\", # TODO: update cols later for new data\n",
        "  nrows=12\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_FE_LightDuty"
      ],
      "id": "4f6a0cd9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Personal Expenditure\n",
        "\n",
        "Table 3-15: Personal Expenditures by Category (Millions of current dollars) \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/personal-expenditures-category-millions-current-dollars)\\]"
      ],
      "id": "f30dd720"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_15 = Path(\"data/bts/table_03_15_022525.xlsx\")\n",
        "if not filepath_3_15.exists():\n",
        "    filepath_3_15.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-02/table_03_15_022525.xlsx\")\n",
        "    filepath_3_15.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_PersonalExpenditure = pd.read_excel(\n",
        "  filepath_3_15,\n",
        "  sheet_name=\"3-15\",\n",
        "  header=1,\n",
        "  usecols=\"A:AP\", # TODO: update cols later for new data\n",
        "  nrows=17\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_PersonalExpenditure"
      ],
      "id": "05340f63",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Personal Consumption\n",
        "\n",
        "Table 3-16: Personal Consumption Expenditures on Transportation by Subcategory (Millions of current dollars) \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/personal-consumption-expenditures-transportation-subcategory-millions-current-dollars)\\]\n",
        "\n",
        "File URL: https://www.bts.gov/sites/bts.dot.gov/files/2025-02/table_03_16_022525.xlsx"
      ],
      "id": "7d8c8d5e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_16 = Path(\"data/bts/table_03_16_022525.xlsx\")\n",
        "if not filepath_3_16.exists():\n",
        "    filepath_3_16.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-02/table_03_16_022525.xlsx\")\n",
        "    filepath_3_16.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file\n",
        "df_PersonalConsumption = pd.read_excel(\n",
        "  filepath_3_16,\n",
        "  sheet_name=\"3-16\",\n",
        "  header=1,\n",
        "  usecols=\"A:AP\", # TODO: update cols later for new data\n",
        "  nrows=17\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_PersonalConsumption"
      ],
      "id": "cc667d45",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Consumer Price Index\n",
        "\n",
        "Data Source: Consumer Price Index for All Urban Consumers (CPI-U) \\[Source: [Bureau of Labor Statistics](https://data.bls.gov/pdq/SurveyOutputServlet)\\]\n",
        "\n",
        "::: {.callout-tip}\n",
        "Create a `.env` file in the root directory and add your BLS API key:\n",
        "```BLS_PUBLIC_API=your-key-here```\n",
        "This enables fetching Consumer Price Index data from the BLS API.\n",
        ":::"
      ],
      "id": "9e99ad11"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from dotenv import load_dotenv\n",
        "load_dotenv()"
      ],
      "id": "d12b3199",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_cpi = Path(\"data/bls/cpi_1913_present.xlsx\")\n",
        "\n",
        "if not filepath_cpi.exists():\n",
        "    filepath_cpi.parent.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "    api_url = \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"\n",
        "    current_year = pd.Timestamp.now().year\n",
        "    all_data = []\n",
        "\n",
        "    for start_year in range(1913, current_year + 1, 20):\n",
        "        end_year = min(start_year + 19, current_year)\n",
        "        payload = {\n",
        "            \"seriesid\": [\"CUUR0000SA0\"],\n",
        "            \"startyear\": str(start_year),\n",
        "            \"endyear\": str(end_year),\n",
        "            \"catalog\": False,\n",
        "            \"calculations\": False,\n",
        "            \"annualaverage\": False,\n",
        "            \"registrationkey\": os.getenv('BLS_PUBLIC_API')\n",
        "        }\n",
        "        response = requests.post(api_url, json=payload, headers={\"Content-Type\": \"application/json\"})\n",
        "\n",
        "        for item in response.json()['Results']['series'][0]['data']:\n",
        "            if item['period'].startswith('M') and item['period'] != 'M13':\n",
        "                all_data.append({\n",
        "                    'year': int(item['year']),\n",
        "                    'period': item['period'],\n",
        "                    'value': float(item['value'])\n",
        "                })\n",
        "\n",
        "    df_pivot = pd.DataFrame(all_data).pivot(index='year', columns='period', values='value')\n",
        "    df_pivot = df_pivot[[f'M{i:02d}' for i in range(1, 13)]].sort_index()\n",
        "\n",
        "    with pd.ExcelWriter(filepath_cpi, engine='openpyxl') as writer:\n",
        "        df_pivot.to_excel(writer, sheet_name='BLS Data Series')\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_CPI = pd.read_excel(\n",
        "  filepath_cpi, # File path\n",
        "  sheet_name=\"BLS Data Series\",\n",
        "  usecols=\"A:M\" # TODO: update cols later for new data\n",
        ")\n",
        "\n",
        "# Calculate annual average\n",
        "df_CPI['annualaverage'] = df_CPI[[f'M{i:02d}' for i in range(1, 13)]].mean(axis=1)\n",
        "\n",
        "# Calculate 12-month percent change for December\n",
        "df_CPI['pct_change_Dec'] = df_CPI['M12'].pct_change(periods=1) * 100\n",
        "\n",
        "# Calculate 12-month percent change for annual average\n",
        "df_CPI['pct_change_Avg'] = df_CPI['annualaverage'].pct_change(periods=1) * 100\n",
        "\n",
        "# display the data\n",
        "df_CPI"
      ],
      "id": "26b4435b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Retail Diesel Prices\n",
        "\n",
        "Retail Prices for Diesel (On-Highway) - All Types \\[Source: [Energy Information Administration](http://www.eia.gov/dnav/pet/pet_pri_gnd_a_epd2d_pte_dpgal_w.htm)]"
      ],
      "id": "8ce45919"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_retaildiesel = Path(\"data/eia/PET_PRI_GND_A_EPD2D_PTE_DPGAL_W.xls\")\n",
        "if not filepath_retaildiesel.exists():\n",
        "    filepath_retaildiesel.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.eia.gov/dnav/pet/xls/PET_PRI_GND_A_EPD2D_PTE_DPGAL_W.xls\")\n",
        "    filepath_retaildiesel.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_RetailDieselPrices = pd.read_excel(\n",
        "  filepath_retaildiesel, # File path\n",
        "  sheet_name=\"Data 2\",\n",
        "  header=2,\n",
        "  usecols=\"A:J\" # TODO: update cols later for new data\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_RetailDieselPrices"
      ],
      "id": "522743d4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Retail Gas Prices\n",
        "\n",
        "Retail Prices for Gasoline, All Grades \\[Source: [Energy Information Administration](https://www.eia.gov/dnav/pet/pet_pri_gnd_a_epm0_pte_dpgal_w.htm)]"
      ],
      "id": "eb519527"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_retailgas = Path(\"data/eia/PET_PRI_GND_A_EPM0_PTE_DPGAL_W.xls\")\n",
        "if not filepath_retailgas.exists():\n",
        "    filepath_retailgas.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.eia.gov/dnav/pet/xls/PET_PRI_GND_A_EPM0_PTE_DPGAL_W.xls\")\n",
        "    filepath_retailgas.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_RetailGasPrices = pd.read_excel(\n",
        "  filepath_retailgas, # File path\n",
        "  sheet_name=\"Data 2\",\n",
        "  header=2,\n",
        "  usecols=\"A:J\" # TODO: update cols later for new data\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_RetailGasPrices"
      ],
      "id": "bb5d3b15",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Average Cost\n",
        "\n",
        "Table 3-17:  Average Cost of Owning and Operating an Automobilea (Assuming 15,000 Vehicle-Miles per Year) \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/average-cost-owning-and-operating-automobilea-assuming-15000-vehicle-miles-year)\\]"
      ],
      "id": "b7112f77"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_3_17 = Path(\"data/bts/table_03_17_032725.xlsx\")\n",
        "if not filepath_3_17.exists():\n",
        "    filepath_3_17.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_03_17_032725.xlsx\")\n",
        "    filepath_3_17.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_AverageCost = pd.read_excel(\n",
        "  filepath_3_17,\n",
        "  sheet_name=\"3-17\",\n",
        "  header=1,\n",
        "  usecols=\"A:AM\", # TODO: update cols later for new data\n",
        "  nrows=8\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_AverageCost"
      ],
      "id": "a46179e9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 4-11\n",
        "\n",
        "Table 4-11: Light Duty Vehicle, Short Wheel Base and Motorcycle Fuel Consumption and Travel \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/light-duty-vehicle-short-wheel-base-and-motorcycle-fuel-consumption-and-travel)]\n",
        "\n",
        "File URL: https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_11_032825.xlsx"
      ],
      "id": "2019cebd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_11 = Path(\"data/bts/table_04_11_032825.xlsx\")\n",
        "if not filepath_4_11.exists():\n",
        "    filepath_4_11.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_11_032825.xlsx\")\n",
        "    filepath_4_11.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_4_11 = pd.read_excel(\n",
        "  filepath_4_11,\n",
        "  sheet_name=\"4-11\",\n",
        "  header=1,\n",
        "  usecols=\"A:AO\", # TODO: update cols later for new data\n",
        "  nrows=18\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_4_11"
      ],
      "id": "1332b98c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy - Medium\n",
        "\n",
        "Table 4-13:  Single-Unit 2-Axle 6-Tire or More Truck Fuel Consumption and Travel \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/single-unit-2-axle-6-tire-or-more-truck-fuel-consumption-and-travel)\\]"
      ],
      "id": "8ae15cec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_13 = Path(\"data/bts/table_04_13_032725.xlsx\")\n",
        "if not filepath_4_13.exists():\n",
        "    filepath_4_13.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_13_032725.xlsx\")\n",
        "    filepath_4_13.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_FE_Medium = pd.read_excel(\n",
        "  filepath_4_13,\n",
        "  sheet_name=\"4-13\",\n",
        "  header=1,\n",
        "  usecols=\"A:AM\", # TODO: update cols later for new data\n",
        "  nrows=6\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_FE_Medium"
      ],
      "id": "d9264b08",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy - Heavy\n",
        "\n",
        "Table 4-14:  Combination Truck Fuel Consumption and Travel \\[Source: [Bureau of Transportation Statistics](https://www.bts.gov/content/combination-truck-fuel-consumption-and-travel)\\]"
      ],
      "id": "8fc6a292"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_4_14 = Path(\"data/bts/table_04_14_032725.xlsx\")\n",
        "if not filepath_4_14.exists():\n",
        "    filepath_4_14.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://www.bts.gov/sites/bts.dot.gov/files/2025-03/table_04_14_032725.xlsx\")\n",
        "    filepath_4_14.write_bytes(response.content)\n",
        "\n",
        "# Read Excel file directly from URL\n",
        "df_FE_Heavy = pd.read_excel(\n",
        "  filepath_4_14,\n",
        "  sheet_name=\"4-14\",\n",
        "  header=1,\n",
        "  usecols=\"A:AN\", # TODO: update cols later for new data\n",
        "  nrows=6\n",
        ")\n",
        "\n",
        "# display the data\n",
        "df_FE_Heavy"
      ],
      "id": "5f612ffe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy by Size Class\n",
        "\n",
        "Table 5.6 Truck Harmonic Mean Fuel Economy by Size Class, 1992, 1997, and 2002 (miles per gallon) \\[Source: [Oak Ridge National Laboratory](https://tedb.ornl.gov/wp-content/uploads/2022/03/TEDB_Ed_40.pdf)\\]"
      ],
      "id": "28beaae3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_tedb = Path(\"data/doe/TEDB_Ed_40.pdf\")\n",
        "if not filepath_tedb.exists():\n",
        "    filepath_tedb.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://tedb.ornl.gov/wp-content/uploads/2022/03/TEDB_Ed_40.pdf\")\n",
        "    filepath_tedb.write_bytes(response.content)\n",
        "\n",
        "# Read Table 5.6 in Page 152\n",
        "df_FE_SizeClass_1 = pd.DataFrame({\n",
        "    \"Manufacturer's gross vehicle weight class\": [\n",
        "        \"1) 6,000 lb and less\",\n",
        "        \"2) 6,001–10,000 lb\",\n",
        "        \"3) 10,000–14,000 lb\",\n",
        "        \"4) 14,001–16,000 lb\",\n",
        "        \"5) 16,001–19,500 lb\",\n",
        "        \"6) 19,501–26,000 lb\",\n",
        "        \"7) 26,001–33,000 lb\",\n",
        "        \"8) 33,001 lb and over\",\n",
        "        \"Light truck subtotal (1–2)\",\n",
        "        \"Medium truck subtotal (3–6)\",\n",
        "        \"Large truck subtotal (7–8)\"\n",
        "    ],\n",
        "    \"1992 TIUS\": [17.2, 13.0, 8.8, 8.8, 7.4, 6.9, 6.5, 5.5, 15.7, 7.3, 5.6],\n",
        "    \"1997 VIUS\": [17.1, 13.6, 9.4, 9.3, 8.7, 7.3, 6.4, 5.7, 15.8, 8.6, 6.1],\n",
        "    \"2002 VIUS\": [17.6, 14.3, 10.5, 8.5, 7.9, 7.0, 6.4, 5.7, 16.2, 8.0, 5.8]\n",
        "})\n",
        "\n",
        "# display the data\n",
        "df_FE_SizeClass_1"
      ],
      "id": "6b949188",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Table 11.6: (Updated June 2022) Retail Prices for Motor Fuel, 1978–2021 (dollars per gallon, including tax)"
      ],
      "id": "7281958c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Read Table 11.6 in Page 285\n",
        "df_FE_SizeClass_2 = pd.DataFrame({\n",
        "    \"Year\": [\n",
        "        1978, 1980, 1985, 1990, 1995, 1996, 1997, 1998, 1999, 2000,\n",
        "        2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n",
        "        2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021\n",
        "    ],\n",
        "    \"Diesel_Current\": [\n",
        "        None, 1.01, 1.22, 1.07, 1.11, 1.24, 1.20, 1.04, 1.12, 1.49,\n",
        "        1.40, 1.32, 1.51, 1.81, 2.40, 2.71, 2.89, 3.80, 2.47, 2.99,\n",
        "        3.84, 3.97, 3.92, 3.83, 2.71, 2.30, 2.65, 3.18, 3.06, 2.55, 3.29\n",
        "    ],\n",
        "    \"Diesel_Constant_2021\": [\n",
        "        None, 3.32, 3.07, 2.22, 1.97, 2.13, 2.02, 1.74, 1.82, 2.35,\n",
        "        2.14, 1.99, 2.22, 2.60, 3.33, 3.64, 3.77, 4.79, 3.12, 3.72,\n",
        "        4.63, 4.68, 4.56, 4.38, 3.09, 2.60, 2.93, 3.43, 3.24, 2.67, 3.29\n",
        "    ],\n",
        "    \"Regular_Current\": [\n",
        "        0.67, 1.25, 1.20, 1.16, 1.15, 1.23, 1.23, 1.06, 1.17, 1.51,\n",
        "        1.46, 1.36, 1.59, 1.88, 2.30, 2.59, 2.80, 3.27, 2.35, 2.79,\n",
        "        3.53, 3.64, 3.53, 3.37, 2.45, 2.14, 2.41, 2.74, 2.64, 2.17, 3.05\n",
        "    ],\n",
        "    \"Regular_Constant_2021\": [\n",
        "        2.78, 4.09, 3.03, 2.41, 2.04, 2.13, 2.08, 1.76, 1.89, 2.38,\n",
        "        2.24, 2.05, 2.34, 2.70, 3.18, 3.48, 3.66, 4.11, 2.97, 3.46,\n",
        "        4.25, 4.30, 4.10, 3.85, 2.80, 2.42, 2.66, 2.95, 2.79, 2.28, 3.05\n",
        "    ],\n",
        "    \"Premium_Current\": [\n",
        "        None, None, 1.34, 1.35, 1.34, 1.41, 1.42, 1.25, 1.36, 1.69,\n",
        "        1.66, 1.56, 1.78, 2.07, 2.49, 2.81, 3.03, 3.52, 2.61, 3.05,\n",
        "        3.79, 3.92, 3.84, 3.71, 2.87, 2.61, 2.91, 3.27, 3.21, 2.79, 3.69\n",
        "    ],\n",
        "    \"Premium_Constant_2021\": [\n",
        "        None, None, 3.37, 2.80, 2.38, 2.44, 2.39, 2.08, 2.21, 2.66,\n",
        "        2.54, 2.34, 2.62, 2.97, 3.46, 3.77, 3.96, 4.43, 3.29, 3.79,\n",
        "        4.57, 4.63, 4.47, 4.25, 3.28, 2.95, 3.22, 3.53, 3.40, 2.92, 3.69\n",
        "    ]\n",
        "})\n",
        "\n",
        "# display the data\n",
        "df_FE_SizeClass_2"
      ],
      "id": "7af9e679",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# FIXME: Unsure the logic behind this calculation.\n",
        "df_FE_SizeClass_2[\"Diesel to Average Ratio\"] = df_FE_SizeClass_2[\"Diesel_Current\"] / (df_FE_SizeClass_2[\"Regular_Current\"] + df_FE_SizeClass_2[\"Premium_Current\"]) / 2\n",
        "\n",
        "df_FE_SizeClass_2[\"Diesel to Average Ratio\"]"
      ],
      "id": "180b9e58",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Repair and Maintenance Cost - Heavy\n",
        "\n",
        "![Repair and Maintenance Cost per Mile](https://fleetimages.bobitstudios.com/upload/trucking-info/content/article/2021-08/maintenance_chart4-__-720x516-s.jpg)\n",
        "\n",
        "Source: https://www.truckinginfo.com/10150350/2021-hdt-fact-book-maintenance-costs-expected-to-rise\n",
        "\n",
        "Further Research: American Transportation Research Institute"
      ],
      "id": "48eb9042"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Manually Entering the data from above image\n",
        "df_RepairMaintenanceCost_Heavy = pd.DataFrame({\n",
        "    \"Year\": [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"],\n",
        "    \"CostMile\": [0.124, 0.152, 0.138, 0.148, 0.158, 0.156, 0.166, 0.167, 0.171, 0.14]\n",
        "})\n",
        "\n",
        "# display the data\n",
        "df_RepairMaintenanceCost_Heavy"
      ],
      "id": "dd9d449f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Driving Costs\n",
        "\n",
        "Data Source: https://exchange.aaa.com/wp-content/uploads/2019/09/AAA-Your-Driving-Costs-2019.pdf"
      ],
      "id": "705f0345"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure file exists\n",
        "filepath_drivingcost = Path(\"data/aaa/YDC-Brochure_2023-FINAL-8.30.23-.pdf\")\n",
        "if not filepath_drivingcost.exists():\n",
        "    filepath_drivingcost.parent.mkdir(parents=True, exist_ok=True)\n",
        "    response = requests.get(\"https://newsroom.aaa.com/wp-content/uploads/2023/08/YDC-Brochure_2023-FINAL-8.30.23-.pdf\")\n",
        "    filepath_drivingcost.write_bytes(response.content)"
      ],
      "id": "f12ba902",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "with pdfplumber.open(filepath_drivingcost) as pdf:\n",
        "    # Page 1 (index 0)\n",
        "    page1 = pdf.pages[0]\n",
        "\n",
        "    # Page 2 (index 1)\n",
        "    page2 = pdf.pages[1]\n",
        "\n",
        "    # Use lines strategy for table detection\n",
        "    table_settings = {\n",
        "        \"vertical_strategy\": \"lines\",\n",
        "        \"horizontal_strategy\": \"lines\",\n",
        "    }\n",
        "\n",
        "    # Extract tables from both pages\n",
        "    table1 = page1.extract_table(table_settings=table_settings)\n",
        "    table2 = page2.extract_table(table_settings=table_settings)\n",
        "\n",
        "    # Create DataFrames\n",
        "    df_page1 = pd.DataFrame(table1[1:], columns=table1[0])\n",
        "    df_page2 = pd.DataFrame(table2[1:], columns=table2[0])\n",
        "\n",
        "    # Remove the 6th column (index 5) from df_page2\n",
        "    df_page2_clean = df_page2.drop(df_page2.columns[0], axis=1)\n",
        "\n",
        "    # Concatenate horizontally (side by side)\n",
        "    df_DrivingCosts = pd.concat([df_page1, df_page2_clean], axis=1)\n",
        "\n",
        "df_DrivingCosts"
      ],
      "id": "21882c9e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Intermediate Cost Calculations\n",
        "\n",
        "### Transportation Expenditures\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "6a2db124"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define year range\n",
        "year_range = list(range(1990, 2021)) # Last year should be one more than desired\n",
        "\n",
        "# Ensure column names are strings in both DataFrames to avoid indexing issues\n",
        "df_PersonalExpenditure.columns = df_PersonalExpenditure.columns.astype(str)\n",
        "df_AverageCost.columns = df_AverageCost.columns.astype(str)\n",
        "\n",
        "# Create a DataFrame to combine the extracted data\n",
        "df_TransportationExpenditure = pd.DataFrame({\n",
        "    # The years from 1990 to 2020\n",
        "    \"Year\": year_range,\n",
        "    # Extract the 'Transportation Cost Percent of Total' for the years 1990-2020 from row 2\n",
        "    \"Transportation Percent of Total\": pd.to_numeric(\n",
        "      df_PersonalExpenditure.loc[2, str(year_range[0]):str(year_range[-1])].values,\n",
        "      errors=\"coerce\"\n",
        "    ),\n",
        "    # Extract the 'Gasoline Cost of Transportation' for the years 1990-2020 from row 2\n",
        "    \"Gasoline Cost of Transportation\": pd.to_numeric(\n",
        "      df_AverageCost.loc[2, str(year_range[0]):str(year_range[-1])].values,\n",
        "      errors=\"coerce\"\n",
        "    )\n",
        "})\n",
        "\n",
        "# FIXME: Did not understand the logic for this\n",
        "df_TransportationExpenditure[\"Gasoline Percent of Total\"] = df_TransportationExpenditure[\"Gasoline Cost of Transportation\"] * df_TransportationExpenditure[\"Transportation Percent of Total\"] / 100\n",
        "\n",
        "df_TransportationExpenditure"
      ],
      "id": "12deaa58",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends"
      ],
      "id": "8eae21ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Transportation Cost Percent of Total with a blue line\n",
        "sns.lineplot(data=df_TransportationExpenditure, x='Year', y='Transportation Percent of Total',\n",
        "             color='#0070C0', linewidth=2.5, label='Transportation as % of Total Expenditure')\n",
        "\n",
        "# Plot Gasoline Percent of Total with a red line\n",
        "sns.lineplot(data=df_TransportationExpenditure, x='Year', y='Gasoline Percent of Total',\n",
        "             color='#FF0000', linewidth=2.5, label='Gasoline as % of Total Expenditure')\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_TransportationExpenditure, x='Year', y='Transportation Percent of Total',\n",
        "            scatter=False, color='#0070C0', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "sns.regplot(data=df_TransportationExpenditure, x='Year', y='Gasoline Percent of Total',\n",
        "            scatter=False, color='#FF0000', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Transportation as a Percent of Total Expenditure',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('% of Total Expenditure', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_TransportationExpenditure['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper right', fontsize=11)\n",
        "\n",
        "# Set y-axis limits to extend to 14\n",
        "plt.ylim(0, 14)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "209da57d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision"
      ],
      "id": "698405fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "df_TranspExp_Comparision = pd.DataFrame({\n",
        "    'Date': [2019, 2019],\n",
        "    'Actual': [\n",
        "        df_TransportationExpenditure.loc[df_TransportationExpenditure['Year'] == 2019, 'Transportation Percent of Total'].iloc[0],\n",
        "        df_TransportationExpenditure.loc[df_TransportationExpenditure['Year'] == 2019, 'Gasoline Percent of Total'].iloc[0]  # FIXED: THere is a potential error here in Excel sheet\n",
        "    ],\n",
        "    'Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_TransportationExpenditure['Year']),\n",
        "                            pd.to_numeric(df_TransportationExpenditure['Transportation Percent of Total']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_TransportationExpenditure['Year']),\n",
        "                            pd.to_numeric(df_TransportationExpenditure['Gasoline Percent of Total']), 1))(2019)\n",
        "    ]\n",
        "}, index=['Transportation as % Total Expenditures', 'Gasoline as % Total Expenditures']).round(2)\n",
        "\n",
        "df_TranspExp_Comparision"
      ],
      "id": "a8bcedb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Auto Cost - Variable-Fixed\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "4b992692"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define year range\n",
        "year_range = list(range(1990, 2021))  # Last year should be one more than desired\n",
        "\n",
        "# Compile data from Raw Datasets\n",
        "df_AutoCost_VariableFixed = pd.DataFrame({\n",
        "    \"Year\": year_range,\n",
        "    \"Variable\": pd.to_numeric(\n",
        "      df_AverageCost.loc[6, str(year_range[0]):str(year_range[-1])].values,\n",
        "      errors=\"coerce\"\n",
        "    ),\n",
        "    \"Fixed\": pd.to_numeric(\n",
        "      df_AverageCost.loc[7, str(year_range[0]):str(year_range[-1])].values,\n",
        "      errors=\"coerce\"\n",
        "    ),\n",
        "    \"Total\": pd.to_numeric(\n",
        "      df_AverageCost.loc[5, str(year_range[0]):str(year_range[-1])].values,\n",
        "      errors=\"coerce\"\n",
        "    ),\n",
        "    \"CPI\": pd.to_numeric(\n",
        "      df_CPI[df_CPI['Year'].between(year_range[0], year_range[-1])][\"Avg.\"].values,\n",
        "      errors=\"coerce\"\n",
        "    )\n",
        "})\n",
        "\n",
        "# Create Derived Columns\n",
        "df_AutoCost_VariableFixed[\"Per 15k\"] = df_AutoCost_VariableFixed[\"Fixed\"] / 15000\n",
        "df_AutoCost_VariableFixed[\"Variable/Total\"] = df_AutoCost_VariableFixed[\"Variable\"] / df_AutoCost_VariableFixed[\"Total\"]\n",
        "df_AutoCost_VariableFixed[\"Variable/CPI\"] = df_AutoCost_VariableFixed[\"Variable\"] / df_AutoCost_VariableFixed[\"CPI\"]\n",
        "df_AutoCost_VariableFixed[\"Fixed/CPI\"] = df_AutoCost_VariableFixed[\"Fixed\"] / df_AutoCost_VariableFixed[\"CPI\"]\n",
        "\n",
        "# Reorder columns\n",
        "df_AutoCost_VariableFixed = df_AutoCost_VariableFixed[['Year', 'Variable/Total', 'Variable/CPI', 'Fixed/CPI', 'Variable', 'Fixed', 'Total', 'Per 15k', 'CPI']]\n",
        "\n",
        "df_AutoCost_VariableFixed"
      ],
      "id": "b4785152",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends\n",
        "\n",
        "##### Fixed/CPI and Variable/CPI"
      ],
      "id": "d7df497d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Create smooth spline curves\n",
        "x = df_AutoCost_VariableFixed['Year']\n",
        "y_fixed = df_AutoCost_VariableFixed['Fixed/CPI']\n",
        "y_variable = df_AutoCost_VariableFixed['Variable/CPI']\n",
        "\n",
        "# Generate smooth curves\n",
        "x_smooth = np.linspace(x.min(), x.max(), 300)\n",
        "spline_fixed = make_interp_spline(x, y_fixed, k=3)\n",
        "spline_variable = make_interp_spline(x, y_variable, k=3)\n",
        "\n",
        "y_fixed_smooth = spline_fixed(x_smooth)\n",
        "y_variable_smooth = spline_variable(x_smooth)\n",
        "\n",
        "# Plot smooth lines\n",
        "sns.lineplot(x=x_smooth, y=y_fixed_smooth, linewidth=2.5, color=\"#00B050\", label=\"Fixed/CPI\")\n",
        "sns.lineplot(x=x_smooth, y=y_variable_smooth, linewidth=2.5, color=\"#FF0000\", label=\"Variable/CPI\")\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.0f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Trendline of Fixed/CPI and Variable/CPI (1990–2020)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('Value', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_AutoCost_VariableFixed['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper right', fontsize=11)\n",
        "\n",
        "# Set y-axis limits to extend to $40\n",
        "plt.ylim(0, 40)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "765ad469",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Average Cost per Mile"
      ],
      "id": "361b4939"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the stacked area plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Stack the areas - Fixed on bottom, Variable on top\n",
        "plt.fill_between(df_AutoCost_VariableFixed['Year'],\n",
        "                 0,\n",
        "                 df_AutoCost_VariableFixed['Fixed'],\n",
        "                 color='#9BBB59',\n",
        "                 label='Fixed')\n",
        "\n",
        "plt.fill_between(df_AutoCost_VariableFixed['Year'],\n",
        "                 df_AutoCost_VariableFixed['Fixed'],\n",
        "                 df_AutoCost_VariableFixed['Fixed'] + df_AutoCost_VariableFixed['Variable'],\n",
        "                 color='#C0504D',\n",
        "                 label='Variable')\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.0f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Average Total Cost per 15,000 Miles',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('USDs', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_AutoCost_VariableFixed['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper left', fontsize=11)\n",
        "\n",
        "# Set y-axis limits\n",
        "plt.ylim(0, 10000)\n",
        "\n",
        "# Add grid\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "4b737db0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision"
      ],
      "id": "d55c7f40"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "df_AutoCost_VariableFixed_Comparision = pd.DataFrame({\n",
        "    'Date': [2019, 2019, 2019],\n",
        "    'Actual': [\n",
        "        df_AutoCost_VariableFixed.loc[df_AutoCost_VariableFixed['Year'] == 2019, 'Variable'].iloc[0],\n",
        "        df_AutoCost_VariableFixed.loc[df_AutoCost_VariableFixed['Year'] == 2019, 'Fixed'].iloc[0],\n",
        "        df_AutoCost_VariableFixed.loc[df_AutoCost_VariableFixed['Year'] == 2019, 'Per 15k'].iloc[0]\n",
        "    ],\n",
        "    'Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_AutoCost_VariableFixed['Year']),\n",
        "                            pd.to_numeric(df_AutoCost_VariableFixed['Variable']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_AutoCost_VariableFixed['Year']),\n",
        "                            pd.to_numeric(df_AutoCost_VariableFixed['Fixed']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_AutoCost_VariableFixed['Year']),\n",
        "                            pd.to_numeric(df_AutoCost_VariableFixed['Per 15k']), 1))(2019)\n",
        "    ]\n",
        "}, index=['Variable', 'Fixed', 'Fixed per 15,000 Miles']).round(2)\n",
        "\n",
        "df_AutoCost_VariableFixed_Comparision"
      ],
      "id": "4e25eb00",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Auto Cost\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "8308aa93"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define year range\n",
        "year_range = list(range(1990, 2021)) # Last year should be one more than desired\n",
        "\n",
        "# Ensure column names are strings in both DataFrames to avoid indexing issues\n",
        "df_AverageCost.columns = df_AverageCost.columns.astype(str)\n",
        "\n",
        "# Compile data from Raw Datasets\n",
        "df_AutoCost = pd.DataFrame({\n",
        "    \"Year\": year_range,\n",
        "    \"Gas\": pd.to_numeric(\n",
        "        df_AverageCost.loc[1, str(year_range[0]):str(year_range[-1])].values,\n",
        "        errors=\"coerce\"\n",
        "    ),\n",
        "    \"Maint\": pd.to_numeric(\n",
        "        df_AverageCost.loc[3, str(year_range[0]):str(year_range[-1])].values,\n",
        "        errors=\"coerce\"\n",
        "    ),\n",
        "    \"Tires\": pd.to_numeric(\n",
        "        df_AverageCost.loc[4, str(year_range[0]):str(year_range[-1])].values,\n",
        "        errors=\"coerce\"   # turns \"U\" into NaN\n",
        "    )\n",
        "})\n",
        "\n",
        "df_AutoCost[\"Maint+Tires\"] = df_AutoCost[\"Maint\"].fillna(0) + df_AutoCost[\"Tires\"].fillna(0)\n",
        "\n",
        "# View Dataframe\n",
        "df_AutoCost"
      ],
      "id": "e6cf3460",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends"
      ],
      "id": "5bc9d37a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Fixed/CPI with a green line\n",
        "sns.lineplot(data=df_AutoCost, x=\"Year\", y=\"Gas\",\n",
        "linewidth=2.5, color=\"#0070C0\", label=\"Gas\")\n",
        "\n",
        "# Plot Variable/CPI with a red line\n",
        "sns.lineplot(data=df_AutoCost, x=\"Year\", y=\"Maint+Tires\",\n",
        "linewidth=2.5,color=\"#FF0000\", label=\"Maint+Tires\")\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_AutoCost, x='Year', y='Gas',\n",
        "            scatter=False, color='#0070C0', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "sns.regplot(data=df_AutoCost, x='Year', y='Maint+Tires',\n",
        "            scatter=False, color='#FF0000', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Average Auto Costs',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('USDs', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_AutoCost['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper left', fontsize=11)\n",
        "\n",
        "# Set y-axis limits to extend to 16\n",
        "plt.ylim(0, 16)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ce254044",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision"
      ],
      "id": "d39f87bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "df_AutoCost_Comparision = pd.DataFrame({\n",
        "    'Date': [2019, 2019],\n",
        "    'Actual': [\n",
        "        df_AutoCost.loc[df_AutoCost['Year'] == 2019, 'Gas'].iloc[0],\n",
        "        df_AutoCost.loc[df_AutoCost['Year'] == 2019, 'Maint+Tires'].iloc[0]\n",
        "    ],\n",
        "    'Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_AutoCost['Year']),\n",
        "                            pd.to_numeric(df_AutoCost['Gas']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_AutoCost['Year']),\n",
        "                            pd.to_numeric(df_AutoCost['Maint+Tires']), 1))(2019)\n",
        "    ]\n",
        "}, index=['Gas', 'Maint+Tires']).round(2)\n",
        "\n",
        "df_AutoCost_Comparision"
      ],
      "id": "e39bd129",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Vehicle Miles - Trucks\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "820ba7b8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define year range\n",
        "year_range = list(range(1990, 2020)) # Last year should be one more than desired\n",
        "\n",
        "# Ensure column names are strings in both DataFrames to avoid indexing issues\n",
        "df_FE_Heavy.columns = df_FE_Heavy.columns.astype(str)\n",
        "df_FE_Medium.columns = df_FE_Medium.columns.astype(str)\n",
        "df_4_11.columns = df_4_11.columns.astype(str)\n",
        "\n",
        "# Compile data from Raw Datasets\n",
        "df_VehicleMiles_Truck = pd.DataFrame({\n",
        "  \"Year\": year_range,\n",
        "  \"Heavy\": pd.to_numeric(\n",
        "    df_FE_Heavy.loc[3, str(year_range[0]):str(year_range[-1])].values,\n",
        "    errors=\"coerce\"\n",
        "  ),\n",
        "  \"Medium\": pd.to_numeric(\n",
        "    df_FE_Medium.loc[3, str(year_range[0]):str(year_range[-1])].values,\n",
        "    errors=\"coerce\"\n",
        "  ),\n",
        "  \"Light\": pd.to_numeric(\n",
        "    df_4_11.loc[10, str(year_range[0]):str(year_range[-1])].values,\n",
        "    errors=\"coerce\"\n",
        "  )\n",
        "})\n",
        "\n",
        "# View dataframe\n",
        "df_VehicleMiles_Truck"
      ],
      "id": "abc8bb5f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends\n",
        "\n",
        "##### 1990 - 2019"
      ],
      "id": "79229c27"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Heavy\",\n",
        "linewidth=2.5,color=\"#0070C0\", label=\"Heavy\")\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Medium\",\n",
        "linewidth=2.5,color=\"#BE4B48\", label=\"Medium\")\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Light\",\n",
        "linewidth=2.5, color=\"#98B954\", label=\"Light\")\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_VehicleMiles_Truck, x='Year', y='Heavy',\n",
        "            scatter=False, color='#0070C0', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Average Vehicle Miles - Trucks (1990 - 2019)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('Miles', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_VehicleMiles_Truck['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper left', fontsize=11)\n",
        "\n",
        "# Set y-axis limits to extend to 80\n",
        "plt.ylim(0, 80)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "beff5d86",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 2000 - 2019"
      ],
      "id": "8286d1e7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Heavy\",\n",
        "linewidth=2.5,color=\"#0070C0\", label=\"Heavy\")\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Medium\",\n",
        "linewidth=2.5,color=\"#BE4B48\", label=\"Medium\")\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_VehicleMiles_Truck, x=\"Year\", y=\"Light\",\n",
        "linewidth=2.5, color=\"#00B050\", label=\"Light\")\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_VehicleMiles_Truck, x='Year', y='Heavy',\n",
        "            scatter=False, color='#0070C0', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_VehicleMiles_Truck, x='Year', y='Medium',\n",
        "            scatter=False, color='#FF0000', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_VehicleMiles_Truck, x='Year', y='Light',\n",
        "            scatter=False, color='#00B050', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Average Vehicle Miles - Trucks (2000 - 2019)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('Miles', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_VehicleMiles_Truck['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper left', fontsize=11)\n",
        "\n",
        "# Set x-axis limits to show only 2000-2019\n",
        "plt.xlim(2000, 2019)\n",
        "\n",
        "# Set y-axis limits to extend to 80\n",
        "plt.ylim(0, 80)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "8f9418de",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision"
      ],
      "id": "dba3cd40"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "df_VMTrucks_Comparision = pd.DataFrame({\n",
        "    'Date': [2019, 2019, 2019, 2019, 2019, 2019],\n",
        "    'Actual': [\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Heavy'].iloc[0],\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Medium'].iloc[0],\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Light'].iloc[0],\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Heavy'].iloc[0],\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Medium'].iloc[0],\n",
        "        df_VehicleMiles_Truck.loc[df_VehicleMiles_Truck['Year'] == 2019, 'Light'].iloc[0]\n",
        "    ],\n",
        "    'Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_VehicleMiles_Truck['Year']),\n",
        "                            pd.to_numeric(df_VehicleMiles_Truck['Heavy']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_VehicleMiles_Truck['Year']),\n",
        "                            pd.to_numeric(df_VehicleMiles_Truck['Medium']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_VehicleMiles_Truck['Year']),\n",
        "                            pd.to_numeric(df_VehicleMiles_Truck['Light']), 1))(2019),\n",
        "        # Last 3: Use only data from 2000+\n",
        "        np.poly1d(np.polyfit(\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Year']),\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Heavy']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Year']),\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Medium']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Year']),\n",
        "          pd.to_numeric(df_VehicleMiles_Truck[df_VehicleMiles_Truck['Year'] >= 2000]['Light']), 1))(2019)\n",
        "    ]\n",
        "}, index=['Heavy Trucks  - 1980+', 'Medium Trucks  - 1980+', 'Light Trucks  - 1980+',\n",
        "'Heavy Trucks  - 2000+', 'Medium Trucks  - 2000+', 'Light Trucks  - 2000+']).round(2)\n",
        "\n",
        "# TODO: '1980+' should be changed to '1990+'\n",
        "\n",
        "df_VMTrucks_Comparision"
      ],
      "id": "fc9ef08a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Economy\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "0b374df8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define year range\n",
        "year_range = [1980, 1985] + list(range(1990, 2020)) # Last year of the range should be one more than desired\n",
        "\n",
        "# Ensure column names are strings in both DataFrames to avoid indexing issues\n",
        "df_FE_LightDuty.columns = df_FE_LightDuty.columns.astype(str)\n",
        "df_FE_Medium.columns = df_FE_Medium.columns.astype(str)\n",
        "df_FE_Heavy.columns = df_FE_Heavy.columns.astype(str)\n",
        "\n",
        "# Compile data from Raw Datasets\n",
        "df_FuelEconomy = pd.DataFrame({\n",
        "  \"Year\": year_range,\n",
        "  \"Light Duty\": pd.to_numeric(\n",
        "    df_FE_LightDuty.loc[0, str(year_range[0]):str(year_range[-1])].values,\n",
        "    errors=\"coerce\"\n",
        "  ),\n",
        "  \"Medium Duty\": pd.to_numeric(\n",
        "    df_FE_Medium.loc[4, str(year_range[0]):str(year_range[-1])].values, # FIXED: Mistake in original calculation; use this instead\n",
        "    errors=\"coerce\"\n",
        "  ),\n",
        "  \"Heavy Duty\": pd.to_numeric(\n",
        "    df_FE_Heavy.loc[4, str(year_range[0]):str(year_range[-1])].values, # FIXED: Mistake in original calculation; use this instead\n",
        "    errors=\"coerce\"\n",
        "  )\n",
        "})\n",
        "\n",
        "# View the dataset\n",
        "df_FuelEconomy"
      ],
      "id": "444a1b92",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends"
      ],
      "id": "2a74c3fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_FuelEconomy, x=\"Year\", y=\"Light Duty\",\n",
        "linewidth=2.5,color=\"#0070C0\", label=\"Light Duty\")\n",
        "\n",
        "# Plot Variable with a red line\n",
        "sns.lineplot(data=df_FuelEconomy, x=\"Year\", y=\"Medium Duty\",\n",
        "linewidth=2.5,color=\"#FF0000\", label=\"Medium Duty\")\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_FuelEconomy, x=\"Year\", y=\"Heavy Duty\",\n",
        "linewidth=2.5, color=\"#00B050\", label=\"Heavy Duty\")\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_FuelEconomy, x='Year', y='Light Duty',\n",
        "            scatter=False, color='#0070C0', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_FuelEconomy, x='Year', y='Medium Duty',\n",
        "            scatter=False, color='#FF0000', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Plotting the linear trend lines with dashed lines\n",
        "sns.regplot(data=df_FuelEconomy, x='Year', y='Heavy Duty',\n",
        "            scatter=False, color='#00B050', ci=None,\n",
        "            line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8})\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Average Fuel Economy (miles per gallon)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Year', fontsize=13)\n",
        "plt.ylabel('Miles Travelled per Gallon', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(df_FuelEconomy['Year'], rotation=90)\n",
        "\n",
        "plt.legend(loc='upper left', fontsize=11)\n",
        "\n",
        "# Set y-axis limits to extend to 25\n",
        "plt.ylim(0, 25)\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "994b7464",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision"
      ],
      "id": "196790d4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "df_FuelEconomy_Comparision = pd.DataFrame({\n",
        "    'Date': [2019, 2019, 2019],\n",
        "    'Actual': [\n",
        "        df_FuelEconomy.loc[df_FuelEconomy['Year'] == 2019, 'Light Duty'].iloc[0],\n",
        "        df_FuelEconomy.loc[df_FuelEconomy['Year'] == 2019, 'Medium Duty'].iloc[0],\n",
        "        df_FuelEconomy.loc[df_FuelEconomy['Year'] == 2019, 'Heavy Duty'].iloc[0]\n",
        "    ],\n",
        "    'Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_FuelEconomy['Year']),\n",
        "                            pd.to_numeric(df_FuelEconomy['Light Duty']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_FuelEconomy['Year']),\n",
        "                            pd.to_numeric(df_FuelEconomy['Medium Duty']), 1))(2019),\n",
        "        np.poly1d(np.polyfit(pd.to_numeric(df_FuelEconomy['Year']),\n",
        "                            pd.to_numeric(df_FuelEconomy['Heavy Duty']), 1))(2019)\n",
        "    ]\n",
        "}, index=['Light Duty', 'Medium Duty', 'Heavy Duty']).round(2)\n",
        "\n",
        "df_FuelEconomy_Comparision"
      ],
      "id": "63e2de37",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Fuel Costs\n",
        "\n",
        "#### Create Dataframe"
      ],
      "id": "96b19ed6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Generate the date range between the desired dates\n",
        "date_range = pd.date_range(\"1994-01-03\", \"2021-12-27\", freq=\"D\")\n",
        "\n",
        "# Compile data from Raw Datasets\n",
        "df_FuelCosts = pd.DataFrame({\n",
        "  \"Date\": df_RetailGasPrices[df_RetailGasPrices['Date'].isin(date_range)]['Date'].values\n",
        "})\n",
        "\n",
        "# Merge Gasoline and Diesel prices directly\n",
        "df_FuelCosts = df_FuelCosts.merge(df_RetailGasPrices[['Date', 'Weekly Rocky Mountain All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)']], on='Date', how='left') \\\n",
        "                            .merge(df_RetailDieselPrices[['Date', 'Weekly Rocky Mountain No 2 Diesel Retail Prices  (Dollars per Gallon)']], on='Date', how='left')\n",
        "\n",
        "# Rename columns\n",
        "df_FuelCosts.rename(columns={\n",
        "    'Weekly Rocky Mountain All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)': 'Gasoline $/gal',\n",
        "    'Weekly Rocky Mountain No 2 Diesel Retail Prices  (Dollars per Gallon)': 'Diesel $/gal'\n",
        "}, inplace=True)\n",
        "\n",
        "# View the dataset\n",
        "df_FuelCosts"
      ],
      "id": "9a9e9b35",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Plotting Trends\n",
        "\n",
        "##### Retail Gasoline Prices - Rocky Mountain (1994 - 2022)"
      ],
      "id": "5b6e8666"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_FuelCosts, x=\"Date\", y=\"Gasoline $/gal\",\n",
        "linewidth=2.5, color=\"#0070C0\", label=None)\n",
        "\n",
        "# Calculate and plot regression line inline\n",
        "plt.plot(\n",
        "    df_FuelCosts['Date'],\n",
        "    stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts['Date']),\n",
        "        df_FuelCosts['Gasoline $/gal']\n",
        "    )[1] + stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts['Date']),\n",
        "        df_FuelCosts['Gasoline $/gal']\n",
        "    )[0] * pd.to_numeric(df_FuelCosts['Date']),\n",
        "    color='#FF0000', linestyle='-', linewidth=2, alpha=0.8\n",
        ")\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Retail Gasoline Prices ($ per gallon) - Rocky Mountain (1994 - 2022)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Date', fontsize=13)\n",
        "plt.ylabel('USD', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(pd.to_datetime(df_FuelCosts['Date']).dt.to_period('Y').unique()[::2], rotation=90)\n",
        "plt.yticks(np.arange(0, 5.5, 0.5))\n",
        "\n",
        "# Set the x-axis limits to be between the min and max of the Date column\n",
        "plt.xlim(df_FuelCosts['Date'].min(), df_FuelCosts['Date'].max())\n",
        "# Set y-axis limits to extend to 5\n",
        "plt.ylim(0, 5)\n",
        "\n",
        "# Format the x-axis to display dates properly\n",
        "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "d17910d6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Retail Gasoline Prices - Rocky Mountain (2005 - 2022)"
      ],
      "id": "949b1884"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_FuelCosts, x=\"Date\", y=\"Gasoline $/gal\",\n",
        "linewidth=2.5, color=\"#0070C0\", label=None)\n",
        "\n",
        "# Calculate and plot regression line for filtered data inline\n",
        "plt.plot(\n",
        "    df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date'],\n",
        "    stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "        df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Gasoline $/gal']\n",
        "    )[1] + stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "        df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Gasoline $/gal']\n",
        "    )[0] * pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "    color='#FF0000', linestyle='-', linewidth=2, alpha=0.8\n",
        ")\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Retail Gasoline Prices ($ per gallon) - Rocky Mountain (2005 - 2022)', fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Date', fontsize=13)\n",
        "plt.ylabel('USD', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(pd.to_datetime(df_FuelCosts['Date']).dt.to_period('Y').unique(), rotation=90)\n",
        "plt.yticks(np.arange(0, 5.5, 0.5))\n",
        "\n",
        "# Set the x-axis limits to be between the min and max of the Date column\n",
        "plt.xlim(pd.to_datetime(\"2005-01-01\"), df_FuelCosts['Date'].max())\n",
        "# Set y-axis limits to extend to 5\n",
        "plt.ylim(0, 5)\n",
        "\n",
        "# Format the x-axis to display dates properly\n",
        "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "e3e5493e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Retail Diesel Prices - Rocky Mountain (1994 - 2022)"
      ],
      "id": "dcea8287"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_FuelCosts, x=\"Date\", y=\"Diesel $/gal\",\n",
        "linewidth=2.5, color=\"#0070C0\", label=None)\n",
        "\n",
        "# Calculate and plot regression line inline\n",
        "plt.plot(\n",
        "    df_FuelCosts.dropna(subset=['Diesel $/gal'])['Date'],\n",
        "    stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts.dropna(subset=['Diesel $/gal'])['Date']),\n",
        "        df_FuelCosts.dropna(subset=['Diesel $/gal'])['Diesel $/gal']\n",
        "    )[1] + stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts.dropna(subset=['Diesel $/gal'])['Date']),\n",
        "        df_FuelCosts.dropna(subset=['Diesel $/gal'])['Diesel $/gal']\n",
        "    )[0] * pd.to_numeric(df_FuelCosts.dropna(subset=['Diesel $/gal'])['Date']),\n",
        "    color='#FF0000', linestyle='-', linewidth=2, alpha=0.8\n",
        ")\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Retail Diesel Prices ($ per gallon) - Rocky Mountain (1994 - 2022)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Date', fontsize=13)\n",
        "plt.ylabel('USD', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(pd.to_datetime(df_FuelCosts['Date']).dt.to_period('Y').unique()[::2], rotation=90)\n",
        "plt.yticks(np.arange(0, 5.5, 0.5))\n",
        "\n",
        "# Set the x-axis limits to be between the min and max of the Date column\n",
        "plt.xlim(df_FuelCosts['Date'].min(), df_FuelCosts['Date'].max())\n",
        "# Set y-axis limits to extend to 5\n",
        "plt.ylim(0, 5)\n",
        "\n",
        "# Format the x-axis to display dates properly\n",
        "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "513f5861",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Retail Diesel Prices - Rocky Mountain (2005 - 2022)"
      ],
      "id": "5f09ea67"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plotting the data using Seaborn and Matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot Fixed with a green line\n",
        "sns.lineplot(data=df_FuelCosts, x=\"Date\", y=\"Diesel $/gal\",\n",
        "linewidth=2.5, color=\"#0070C0\", label=None)\n",
        "\n",
        "# Plot regression line for dates from 2005 onwards\n",
        "plt.plot(\n",
        "    df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date'],\n",
        "    stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "        df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Diesel $/gal'].dropna()\n",
        "    )[1] + stats.linregress(\n",
        "        pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "        df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Diesel $/gal'].dropna()\n",
        "    )[0] * pd.to_numeric(df_FuelCosts[df_FuelCosts['Date'] >= pd.to_datetime(\"2005-01-01\")]['Date']),\n",
        "    color='#FF0000', linestyle='-', linewidth=2, alpha=0.8\n",
        ")\n",
        "\n",
        "# Format y-axis as currency with comma separation using anonymous function\n",
        "plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, p: f'${x:,.2f}'))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Retail Diesel Prices ($ per gallon) - Rocky Mountain (2005 - 2022)',\n",
        "          fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Date', fontsize=13)\n",
        "plt.ylabel('USD', fontsize=13)\n",
        "\n",
        "# Show all x-axis labels with 90-degree rotation\n",
        "plt.xticks(pd.to_datetime(df_FuelCosts['Date']).dt.to_period('Y').unique(), rotation=90)\n",
        "plt.yticks(np.arange(0, 5.5, 0.5))\n",
        "\n",
        "# Set the x-axis limits to be between the min and max of the Date column\n",
        "plt.xlim(pd.to_datetime(\"2005-01-01\"), df_FuelCosts['Date'].max())\n",
        "# Set y-axis limits to extend to 5\n",
        "plt.ylim(0, 5)\n",
        "\n",
        "# Format the x-axis to display dates properly\n",
        "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "\n",
        "# Add major and minor grid lines for better readability\n",
        "plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, which='major')\n",
        "\n",
        "# Improve layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "010ff794",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Actual vs Trend Comparision\n",
        "\n",
        "##### 1994 - 2022"
      ],
      "id": "fbc30483"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "comparison_dates = [pd.to_datetime(\"2019-01-01\"), pd.to_datetime(\"2019-12-31\"), pd.to_datetime(\"2019-07-01\")]\n",
        "\n",
        "df_FuelCost_Comparison_1 = pd.DataFrame({\n",
        "    'Gasoline Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_datetime(df_FuelCosts.dropna(subset=['Date', 'Gasoline $/gal'])['Date']).astype('int64'),\n",
        "                           df_FuelCosts.dropna(subset=['Date', 'Gasoline $/gal'])['Gasoline $/gal'].astype(float), 1))(pd.to_datetime(date).value)\n",
        "        for date in comparison_dates\n",
        "    ],\n",
        "    'Diesel Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_datetime(df_FuelCosts.dropna(subset=['Date', 'Diesel $/gal'])['Date']).astype('int64'),\n",
        "                           df_FuelCosts.dropna(subset=['Date', 'Diesel $/gal'])['Diesel $/gal'].astype(float), 1))(pd.to_datetime(date).value)\n",
        "        for date in comparison_dates\n",
        "    ]\n",
        "}, index=comparison_dates).round(3)\n",
        "\n",
        "df_FuelCost_Comparison_1"
      ],
      "id": "8ba403c3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 2005 - 2022"
      ],
      "id": "4da3cae9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the comparison DataFrame\n",
        "comparison_dates = [pd.to_datetime(\"2019-01-01\"), pd.to_datetime(\"2019-12-31\"), pd.to_datetime(\"2019-07-01\")]\n",
        "\n",
        "# Filter for dates >= 2005-01-01 and fit trends\n",
        "date_filter = pd.to_datetime(df_FuelCosts['Date']) >= pd.to_datetime(\"2005-01-01\")\n",
        "\n",
        "df_FuelCost_Comparison_2 = pd.DataFrame({\n",
        "    'Gasoline Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_datetime(df_FuelCosts[date_filter].dropna(subset=['Date', 'Gasoline $/gal'])['Date']).astype('int64'),\n",
        "                           df_FuelCosts[date_filter].dropna(subset=['Date', 'Gasoline $/gal'])['Gasoline $/gal'].astype(float), 1))(pd.to_datetime(date).value)\n",
        "        for date in comparison_dates\n",
        "    ],\n",
        "    'Diesel Trend': [\n",
        "        np.poly1d(np.polyfit(pd.to_datetime(df_FuelCosts[date_filter].dropna(subset=['Date', 'Diesel $/gal'])['Date']).astype('int64'),\n",
        "                           df_FuelCosts[date_filter].dropna(subset=['Date', 'Diesel $/gal'])['Diesel $/gal'].astype(float), 1))(pd.to_datetime(date).value)\n",
        "        for date in comparison_dates\n",
        "    ]\n",
        "}, index=comparison_dates).round(3)\n",
        "\n",
        "df_FuelCost_Comparison_2"
      ],
      "id": "bbe5d161",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Auto Operating Costs\n",
        "\n",
        "Calculate Auto Operating Cost - 2019"
      ],
      "id": "a9c4dd26"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Autos\n",
        "AOC_Auto = (\n",
        "  # Get gasoline price per gallon for July 2019\n",
        "    df_FuelCost_Comparison_1.loc[pd.to_datetime(\"2019-07-01\"), 'Gasoline Trend'] /\n",
        "    # Divide by fuel economy (miles per gallon) to get gallons per mile\n",
        "    df_FuelEconomy_Comparision.loc['Light Duty', 'Trend'] * 100 +  # Convert to cents\n",
        "    # Add maintenance and tire costs per mile (already in cents)\n",
        "    df_AutoCost_Comparision.loc['Maint+Tires', 'Trend']\n",
        ")\n",
        "\n",
        "# Light Duty Trucks\n",
        "AOC_LT = (\n",
        "    # Fuel cost: (price per gallon / mpg) * 100 cents per dollar\n",
        "    df_FuelCost_Comparison_1.loc[pd.to_datetime(\"2019-07-01\"), 'Gasoline Trend'] /\n",
        "    df_FE_SizeClass_1[df_FE_SizeClass_1['Manufacturer\\'s gross vehicle weight class'] == 'Light truck subtotal']['2002 VIUS'].iloc[0] * 100 +\n",
        "    # Maintenance cost\n",
        "    df_AutoCost_Comparision.loc['Maint+Tires', 'Trend']\n",
        ")\n",
        "\n",
        "# Medium Duty Trucks\n",
        "AOC_MD = (\n",
        "    # Fuel cost: diesel price / medium duty mpg * 100\n",
        "    df_FuelCost_Comparison_1.loc[pd.to_datetime(\"2019-07-01\"), 'Diesel Trend'] /\n",
        "    df_FuelEconomy_Comparision.loc['Medium Duty', 'Trend'] * 100 +\n",
        "    # Maintenance cost: approximation as average of light and heavy\n",
        "    (df_AutoCost_Comparision.loc['Maint+Tires', 'Trend'] + (df_RepairMaintenanceCost_Heavy['CostMile'].mean() * 100)) / 2\n",
        ")\n",
        "\n",
        "# Heavy Duty Trucks\n",
        "AOC_HV = (\n",
        "    # Fuel cost: diesel price / heavy duty mpg * 100\n",
        "    df_FuelCost_Comparison_1.loc[pd.to_datetime(\"2019-07-01\"), 'Diesel Trend'] /\n",
        "    df_FuelEconomy_Comparision.loc['Heavy Duty', 'Trend'] * 100 +\n",
        "    # Maintenance cost\n",
        "    (df_RepairMaintenanceCost_Heavy['CostMile'].mean() * 100)\n",
        ")"
      ],
      "id": "30bc0700",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Export"
      ],
      "id": "0d8b844d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create dataframe compiling data\n",
        "df_AOC_export = pd.DataFrame({\n",
        "  'Auto Operating Costs': ['AOC_Auto', 'AOC_LT', 'AOC_MD', 'AOC_HV'],\n",
        "  'Cost (cent/mile)': [\n",
        "      AOC_Auto.round(1),\n",
        "      AOC_LT.round(1),\n",
        "      AOC_MD.round(1),\n",
        "      AOC_HV.round(1)\n",
        "    ]\n",
        "})\n",
        "\n",
        "# View the dataset\n",
        "df_AOC_export"
      ],
      "id": "b4268350",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Pukar.Bhandari\\AppData\\Local\\miniconda3\\envs\\wfrc\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}